#ifndef MACHINE_H_
#define MACHINE_H_

#include "../../include/system.h"

#define START_PAGE 0x1000
#define START_VGA 0xA0000

#define MULTIBOOT_MAGIC 0x1BADB002
#define null (0)

/****************  GDT Structures   ****************************/
/* Defines a GDT entry. We say packed, because it prevents the
*  compiler from doing things that it thinks is best: Prevent
*  compiler "optimization" by packing */

struct GDTEntry
{
	WORD limit_1; // segment limit bits 0->15
	WORD base_1;	// segment base address bits 0->15
	BYTE base_2;	// segment base address bits 16->23

	BYTE type : 4;		// segment type
	BYTE system : 1;	// descriptor type
	BYTE dpl : 2;			// descriptor privilige level
	BYTE present : 1; // segment present in memory

	BYTE limit_2 : 4;			// segment limit bits 16->19
	BYTE avl : 1;					// available bit
	BYTE zero : 1;				// zero field for 32 bit architecture
	BYTE db : 1;					// D/B field
	BYTE granularity : 1; // Granularity field

	BYTE base_3;						 // segment base address bits 24->31
} __attribute__((packed)); /* this attribute ensures the structure generated by the compiler
												will be exactly the same size as the above (ie no optimization)    */
// Structure to be loaded into the GDTR using lgdt insruction
struct GDTR
{
	WORD limit;
	DWORD base;
} __attribute__((packed));

/******************** End GDT Structures ************************/
/****************************************************************/

/***************************************************************/
/***********************   IDT Structures **********************/
struct IDTEntry
{
	WORD offset_1; // offset 0..15
	WORD segment;	// segment selector
	BYTE reserved : 5;
	BYTE flags : 3; // 0 for interrupt/trap gates
	BYTE type : 5;	// type of gate
	BYTE dpl : 2;
	BYTE present : 1;
	WORD offset_2;
} __attribute__((packed));

// Structure to be loaded into the IDTR
struct IDTR
{
	WORD limit;
	DWORD base;
} __attribute__((packed));

/******************** End IDT Structures ************************/
/****************************************************************/
#define MAX_GDT_ENTRIES 3
#define MAX_IDT_ENTRIES 256

/******************* Registers *********************************/
/* this struct represents the stack format
/* when switching to c interrupt handler   */

struct regs
{
	DWORD ss, gs, fs, es, ds;
	DWORD ebp, esi, edi, edx, ecx, ebx, eax;
} __attribute__((packed));

/***************************************************************/

class Machine
{
	static void setupGDT();
	static void setupIDT();

public:
	static void init();

	static inline void cli()
	{
		asm volatile("cli");
	}

	static inline void sti()
	{
		asm volatile("sti");
	}

	static inline void hlt()
	{
		while (1)
			;
	}

	/* We will use this to write to I/O ports to send bytes to devices. This
	*  will be used in the next tutorial for changing the textmode cursor
	*  position. Again, we use some inline assembly for the stuff that simply
	*  cannot be done in C */
	static inline unsigned char inb(unsigned short port)
	{
		unsigned char rv;
		asm volatile("inb %1, %0"
								 : "=a"(rv)
								 : "dN"(port));
		return rv;
	}

	static inline void outb(unsigned short port, unsigned char data)
	{
		asm volatile("outb %1, %0"
								 :
								 : "dN"(port), "a"(data));
	}
};

#endif /*MACHINE_H_*/
